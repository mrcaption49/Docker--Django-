################# Dockerfile #################

FROM python:3.11

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

WORKDIR /app

COPY requirements.txt .

RUN pip install --upgrade pip
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

################# END_OF_Dockerfile #################








################# Build the Docker Image #################

Open your terminal and navigate to the directory where your Dockerfile is located.
Then run the following command to build the Docker image and name it my-docker-image:

build docker images with cmd 
==> docker build -t my-docker-image .

show the image created 
==> docker images

################# END #################








################# Run a Docker container #################

To run a Docker container with a specific name,
such as my-docker-container, you can use the following command:

===> docker run -d --name my-docker-container -p 8001:8000 my-docker-image


Verify the Container is Running
After running this command, you can check if the container is running by using:

===> docker ps

################# END Of Run a Docker container #################











################# Docker_Volumes #################

In Docker, volumes are used to persist data generated by and used by Docker containers. 
Volumes allow data to be stored outside of the container's filesystem, 
making it easier to manage, back up, and share data between containers.

===> docker run -d --name my-docker-container -p 8001:8000 -v .:/app my-docker-image

################# END_OF_Docker_Volumes #################











################# Docker_compose_file #################
name: my-docker-project

version: '3.8'  # Specify the version of Docker Compose

services:
  my-service:
    image: my-docker-image  # The Docker image to use
    container_name: my-docker-container  # The name of the container
    ports:
      - "8001:8000"  # Map port 8000 in the container to port 8001 on the host
    volumes:
      - .:/app  # Mount the current directory to /app in the container
    # Optional: Add environment variables if needed
    # environment:
    #   - ENV_VAR_NAME=value
    # Optional: Specify any commands to run
    # command: python app.py

# Optional: Define networks or other configurations here
# networks:
#   default:
#     driver: bridge
################# END_OF_Docker_Compose_file ################# 